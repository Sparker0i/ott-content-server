name: Build and Deploy
on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
        env:
          OTT_CONTENT_DATABASE: ${{ secrets.OTT_CONTENT_DATABASE }}
          OTT_CONTENT_PASSWORD: ${{ secrets.OTT_CONTENT_PASSWORD }}
          OTT_CONTENT_PORT: ${{ secrets.OTT_CONTENT_PORT }}
          OTT_CONTENT_SERVER: ${{ secrets.OTT_CONTENT_SERVER }}
          OTT_CONTENT_USERNAME: ${{ secrets.OTT_CONTENT_USERNAME }}
          OTT_CONTENT_SCHEMA: ${{ secrets.OTT_CONTENT_SCHEMA }}
      - name: Install Dependencies
        run: npm install
        working-directory: ./server
  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
        env:
          OTT_CONTENT_DATABASE: ${{ secrets.OTT_CONTENT_DATABASE }}
          OTT_CONTENT_PASSWORD: ${{ secrets.OTT_CONTENT_PASSWORD }}
          OTT_CONTENT_PORT: ${{ secrets.OTT_CONTENT_PORT }}
          OTT_CONTENT_SERVER: ${{ secrets.OTT_CONTENT_SERVER }}
          OTT_CONTENT_USERNAME: ${{ secrets.OTT_CONTENT_USERNAME }}
          OTT_CONTENT_SCHEMA: ${{ secrets.OTT_CONTENT_SCHEMA }}
      - name: Initialize Google Cloud SDK
        uses: zxyle/publish-gae-action@master
        env:
          OTT_CONTENT_DATABASE: ${{ secrets.OTT_CONTENT_DATABASE }}
          OTT_CONTENT_PASSWORD: ${{ secrets.OTT_CONTENT_PASSWORD }}
          OTT_CONTENT_PORT: ${{ secrets.OTT_CONTENT_PORT }}
          OTT_CONTENT_SERVER: ${{ secrets.OTT_CONTENT_SERVER }}
          OTT_CONTENT_USERNAME: ${{ secrets.OTT_CONTENT_USERNAME }}
          OTT_CONTENT_SCHEMA: ${{ secrets.OTT_CONTENT_SCHEMA }}
        with:
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.PROJECT_ID }}
          gae_config_path: ./server/app.yaml
      - name: Publish app to Google App Engine
        run: | 
          # This client-secret.json is converted by GCP_SA_KEY.
          gcloud auth activate-service-account ${{ secrets.GCP_SA_EMAIL }} --key-file=client-secret.json
          gcloud config set project ${{ secrets.PROJECT_ID }}
          gcloud -q app deploy app.yaml --promote
        working-directory: ./server